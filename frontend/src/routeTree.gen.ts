/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as _root_newRouteImport } from './routes/__root_new'
import { Route as UsersRouteImport } from './routes/users'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SongsCreateRouteImport } from './routes/songs/create'

const _root_newRoute = _root_newRouteImport.update({
  id: '/__root_new',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SongsCreateRoute = SongsCreateRouteImport.update({
  id: '/songs/create',
  path: '/songs/create',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/users': typeof UsersRoute
  '/songs/create': typeof SongsCreateRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/users': typeof UsersRoute
  '/songs/create': typeof SongsCreateRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/__root_new': typeof _root_newRoute
  '/auth': typeof AuthRoute
  '/users': typeof UsersRoute
  '/songs/create': typeof SongsCreateRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/users' | '/songs/create'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/users' | '/songs/create'
  id: '__root__' | '/' | '/__root_new' | '/auth' | '/users' | '/songs/create'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  _root_newRoute: typeof _root_newRoute
  AuthRoute: typeof AuthRoute
  UsersRoute: typeof UsersRoute
  SongsCreateRoute: typeof SongsCreateRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__root_new': {
      id: '/__root_new'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _root_newRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/songs/create': {
      id: '/songs/create'
      path: '/songs/create'
      fullPath: '/songs/create'
      preLoaderRoute: typeof SongsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  _root_newRoute: _root_newRoute,
  AuthRoute: AuthRoute,
  UsersRoute: UsersRoute,
  SongsCreateRoute: SongsCreateRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
